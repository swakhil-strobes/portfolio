name: Build and Push dev image to ECR

concurrency: 
  group: ${{ github.ref }}
  cancel-in-progress: true

on:
  push:
    branches:
      - main
    #tags:
    #  - "v*"

jobs:
  build-and-push-image:
    if: (github.event_name == 'push')
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
          
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_DEFAULT_REGION }}
      
      - name: set env
        run: echo "RELEASE_VERSION=${GITHUB_REF#refs/*/}" >> $GITHUB_ENV

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v2
      
      # - name: Cache Docker layers
      #   uses: actions/cache@v3
      #   with:
      #     path: /tmp/.buildx-cache
      #     key: ${{ runner.os }}-buildx-${{ github.sha }}
      #     restore-keys: |
      #       ${{ runner.os }}-buildx-
      
      - name: Build Docker image
        uses: docker/build-push-action@v3
        with:
          context: ./Dockerfile.cache
          #builder: ${{ steps.buildx.outputs.name }}
          push: false
          tags: ${{ steps.login-ecr.outputs.registry }}/portfolio:${{ env.RELEASE_VERSION }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          #cache-from: type=local,src=/tmp/.buildx-cache
          #cache-to: type=local,dest=/tmp/.buildx-cache-new
      
      # - name: Move cache
      #   run: |
      #     rm -rf /tmp/.buildx-cache
      #     mv /tmp/.buildx-cache-new /tmp/.buildx-cache
          
  fake-step:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
          
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_DEFAULT_REGION }}
      
      - name: set env
        run: echo "RELEASE_VERSION=${GITHUB_REF#refs/*/}" >> $GITHUB_ENV

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build Docker image
        uses: docker/build-push-action@v3
        with:
          context: .
          push: false
          tags: ${{ steps.login-ecr.outputs.registry }}/portfolio:${{ env.RELEASE_VERSION }}

      # - name: Verify Changed files
      #   uses: tj-actions/verify-changed-files@v10
      #   id: verify-changed-files
      #   with:
      #     files: |
      #        requirements.txt

      # - name: Build, tag, and push image to Amazon ECR
      #   if: steps.verify-changed-files.outputs.files_changed == 'true'
      #   env:
      #     ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
      #     ECR_REPOSITORY: portfolio
      #     IMAGE_TAG: ${{ env.RELEASE_VERSION }}
      #   run: |
      #     docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -f Dockerfile .
      #     docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          
      # - name: Build, tag, and push image to Amazon ECR
      #   if: steps.verify-changed-files.outputs.files_changed != 'true'
      #   env:
      #     ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
      #     ECR_REPOSITORY: portfolio
      #     IMAGE_TAG: ${{ env.RELEASE_VERSION }}
      #   run: |
      #     docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -f Dockerfile.cache .
      #     docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

  # deploy-service-update:
  #   runs-on: ubuntu-latest
  #   needs: build-and-push-image
    
  #   steps:
  #     - name: Configure AWS credentials
  #       uses: aws-actions/configure-aws-credentials@v1
  #       with:
  #         aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
  #         aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  #         aws-region: ${{ secrets.AWS_DEFAULT_REGION }}
      
  #     - name: Update task definition
  #       id: my_app
  #       uses: aws-actions/amazon-ecs-render-task-definition@v1
  #       with:
  #         task-definition: task-definition.json
  #         container-name: my_app
  #         image: ${{ env.IMAGE_URL }}:${{ env.RELEASE_VERSION }}  
